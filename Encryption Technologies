GNU Privacy Guard (GPG)

             Create your pair of GPG keys:
>>> gpg --gen-key
when you create the first time you need to enter a pasphress.
The first thing that this command does is to create a populated .gnupg directory in your home directory:

Encrypting file:
Note that the -c option indicates that I chose to use symmetric encryption with a passphrase for the file. The passphrase that you enter will be for the file, not for your private key.
gpg -c yourfile

Look at your new set of files. One slight flaw with this is that GPG makes an encrypted copy of the file, but it also leaves the original, unencrypted file intact:

ls -l
4. Let's get rid of that unencrypted file with shred . We'll use the -u option to delete the file, and the -z option to overwrite the deleted file with zeros:
shred -u -z yourfile

cat yourfile.gpg

But let's now say that you no longer need to have this file encrypted, and you want to decrypt it in order to let other people see it. Exit Maggie's account by typing exit . Then, just use gpg with the -d option:
gpg -d yourfile.gpg
gpg -o yuornewnameforfile -d /shared/secret.gpg


Exmeple:
>>> gpg --gen-key
vi secret.txt
gpg -c secret.txt
shred -u -z secret.txt
cat secret.gpg or gpg -d secret.txt
sudo mkdir /shared
sudo chown username: /shared
sudo chmod 755 /shared
mv secret.gpg /shared
su username
cat /shared/secret.gpg
exit
gpg -d /shared/secret.gpg
gpg -o dcryptTheSecretgpg.txt -d /shared/secret.gpg


            Encrypting Files With Public Keys
gpg --help
apt-get install gnupg
gpg --list-secret-keys
gpg --list-keys

Generate keys:
gpg --full-generate-key
OR
gpg --gen-key

Export/Import keys:
-------------------
gpg --export -a mirzad > mirzad_public.key
gpg --import mirzad_public.key
gpg --export-secret-keys mirzad > mirzad-private-key.key
gpg --import mirzad-private-key.key

Encrypt & Decrypt
-----------------
gpg -e -r "mirzad" text.txt
gpg --always-trust -e -r "mirzad" text.txt
gpg -d text.txt.gpg
gpg --batch --passphrase text.txt.gpg


===================================Exemple:
I have two servers: I want to encrypt with rango's public key from os. I want to send
my public key to rango in a text mode.

Server 1 = rango@brother:
Server 2 = os@ubun:

=================================
<Server 1
1 os@ubun:~$ gpg --gen-key
1 Real name: mirzad
1 Email address: mirzadmirzad@gmail.com
1 Passphress: xxxxxxxxxx
Keys folder> .gnupg
2 os@ubun:~$ gpg --export -a mirzad > mirzad_public.key
3 scp mirzad_public.key rango@192.168.0.105:/home/rango/
================================
===================================================================================
Now i have os's public.key. I want encrypt file with that public.key and send the encrypted file to os.
<Server 2
rango@brother:~$ gpg --import mirzad_public.key
rango@brother:~$ ls / > secret.txt
-r, --recipient USER-ID 
-e, --encrypt
rango@brother:~$ gpg -e -r "mirzad" secret.txt 
Use this key anyway? (y/N)  y
rango@brother:~$ scp secret.txt.gpg os@192.168.0.103:/home/os/
====================================================================================

=================================
And now i open the encrypted file which i received from rango.
<Server 1
os@ubun:~$ gpg -d secret.txt.gpg 
=================================










===========================================================================================
                        Encrypting partitions with Linux Unified Key Setup (LUKS)
===========================================================================================
            




    FULL DISK ENCRYPTION
     
    # 1. installing cryptsetup & dm-crypt
    apt install cryptsetup 
     
    # 2. Idenfity the name of the disk or partition to encrypt:
    fdisk -l  # for this example it will be /dev/sdc
    or 
    dmesg  # for usb sticks
     
    # 3. Filling the disk or partition to encrypt with random data (optional)
    dd if=/dev/urandom of=/dev/sdc status=progress
     
    # 4. Initialize the LUKS partition and set the initial passphrase
    cryptsetup -y -v luksFormat /dev/sdc 
     
        WARNING!
        ========
        This will overwrite data on /dev/sdc irrevocably.
        
        Are you sure? (Type uppercase yes): YES
        Enter passphrase for /dev/sdc: 
        Verify passphrase: 
        Command successful.
     
    #5.  Open the encrypted device and set up a mapping name
    cryptsetup luksOpen /dev/sdc secretdata
    ls -l /dev/mapper
     
    # display the status of the mapping file
    cryptsetup status secretdata
     
    # 6. Format the filesystem
    mkfs.ext4 /dev/mapper/secretdata
     
    # 7. Mount the encrypted file system into the main file tree.
    mount /dev/mapper/secretdata /mnn  # -> you can mount it to any existing directory like /mnt
     
    # 8. Unmount the encrypted disk
    umount /mnt
    cryptsetup luksClose secretdata
     
    # 9. Accesing the encrypted disk after a restart or unmounting:
    cryptsetup luksOpen /dev/hdc secretdata
    mount /dev/mapper/secretdata /root/secret
     
    #10. Unlocking LUKS Encrypted Drives With A Keyfile
     
    # generating a random keyfile
    dd if=/dev/urandom of=/root/keyfile bs=1024 count=4
     
    # set the permissions (only root can read it)
    chmod 400 /root/keyfile
     
    # add the keyfile as an additional authorization method
    cryptsetup luksAddKey /dev/sdc /root/keyfile
     
    # unlock the drive using the keyfile
    cryptsetup luksOpen /dev/hdc secret --key-file /root/keyfile








====================================================================================================================
                                               eCryptfs
====================================================================================================================
                                
sudo apt install ecryptfs-utils –y

luks@rango:~$ sudo mkdir crystal

luks@rango:~$ sudo mount -t ecryptfs crystal crystal
Select key type to use for newly created files: 
 1) passphrase
 2) tspi
Selection:           <---- Type 1 and press enter
Passphrase: 
Select cipher: 
 1) aes: blocksize = 16; min keysize = 16; max keysize = 32    <---- Type 1 and press enter
 2) blowfish: blocksize = 8; min keysize = 16; max keysize = 56
 3) des3_ede: blocksize = 8; min keysize = 24; max keysize = 24
 4) twofish: blocksize = 16; min keysize = 16; max keysize = 32
 5) cast6: blocksize = 16; min keysize = 16; max keysize = 32
 6) cast5: blocksize = 8; min keysize = 5; max keysize = 16
Selection [aes]: 1
Select key bytes:                   <---- Type 3 and press enter
 1) 16
 2) 32
 3) 24
Selection [16]: 3
Enable plaintext passthrough (y/n) [n]: n         <---- Type n and press enter        
Enable filename encryption (y/n) [n]: y            <---- Type y and press enter
Filename Encryption Key (FNEK) Signature [9ff686e17818b5b9]:   <----  press enter
Attempting to mount with the following options:
  ecryptfs_unlink_sigs
  ecryptfs_fnek_sig=9ff686e17818b5b9
  ecryptfs_key_bytes=24
  ecryptfs_cipher=aes
  ecryptfs_sig=9ff686e17818b5b9
Mounted eCryptfs

luks@rango:~/crystal$ping -c 5 8.8.8.8 > text.txt

luks@rango:~/crystal$ cat text.txt 
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=117 time=14.4 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=117 time=14.5 ms
64 bytes from 8.8.8.8: icmp_seq=3 ttl=117 time=14.8 ms
64 bytes from 8.8.8.8: icmp_seq=4 ttl=117 time=14.8 ms
64 bytes from 8.8.8.8: icmp_seq=5 ttl=117 time=14.6 ms

luks@rango:~$ sudo umount crystal 

luks@rango:~/crystal$ ls
ECRYPTFS_FNEK_ENCRYPTED.FWaTxcPVS.WpiEXHZ-flUm.bAk-Btfww2tqLq3YXMuowu4EhAdRkQlck2k--


luks@rango:~$ sudo mount -t ecryptfs crystal crystal
Just enter the information you entered above in order to get back your data. The same passphares and others.

luks@rango:~$ ls crystal/
text.txt

luks@rango:~$ cat crystal/text.txt 
PING 8.8.8.8 (8.8.8.8) 56(84) bytes of data.
64 bytes from 8.8.8.8: icmp_seq=1 ttl=117 time=14.5 ms
64 bytes from 8.8.8.8: icmp_seq=2 ttl=117 time=14.8 ms
64 bytes from 8.8.8.8: icmp_seq=3 ttl=117 time=15.3 ms
64 bytes from 8.8.8.8: icmp_seq=4 ttl=117 time=14.7 ms
64 bytes from 8.8.8.8: icmp_seq=5 ttl=117 time=14.8 ms




sudo apt install ecryptfs-utils –y
sudo mkdir crystal
sudo mount -t ecryptfs crystal crystal
ping -c 5 8.8.8.8 > crystal/text.txt
cat crystal/text.txt
sudo umount crystal 
ls crystal/
ECRYPTFS_FNEK_ENCRYPTED.FWaTxcPVS.WpiEXHZ-flUm.bAk-Btfww2tqLq3YXMuowu4EhAdRkQlck2k--
sudo mount -t ecryptfs crystal crystal
ls crystal/
text.txt


















